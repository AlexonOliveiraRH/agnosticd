---
###### VARIABLES YOU SHOULD CONFIGURE FOR YOUR DEPLOYEMNT
###### OR PASS as "-e" args to ansible-playbook command

# This config was written with the expectation of using python3
# Several of the roles that it depends on only work with python2,
# so they had to be modified to handle python3 as well. Use this
# var so that it is passed along and influences how those roles run.
all_use_python3: true

# The name of the agnosticd config to deploy
env_type: osp-vsphere

# The type of cloud provider this will be deployed to
# This must be passed in as extra var - for reference only here.
cloud_provider: osp

# This is an account that must exist in OpenStack.
# It is used to create projects, access, Heat templates
admin_user: opentlc-mgr

# Authenication credentials for OpenStack in order to create the things.
# These should be included with your secrets, but are listed here for reference
osp_auth_url: FROM_SECRET
osp_auth_username: FROM_SECRET
osp_auth_password: FROM_SECRET
osp_auth_cloud: FROM_SECRET
osp_auth_project_domain: default
osp_auth_user_domain: default

# The output_dir holds all of the files generated during the deployment
# This includes generated Heat templates, SSH config, SSH keys
# This must be an absolute path and no vars (like $HOME or ~)
output_dir: /tmp/output_dir

# The {{ guid }} is used everywhere and it is what differentiates otherwise
# identical environments. Make this unique. Usually they are 4 characters, but
# it can be any reasonablre length.
guid: mydefault

# The name of the project that will be created in OpenStack for the user
osp_project_name: "{{ guid }}-project"

# Set this to true if you need to create a new project in OpenStack
# If it is set to false, the {{ osp_project_name }} must already exist and
# should be able to run whatever you are deploying
osp_project_create: true

# Used to add metadata (tags) to OpenStack objects created
project_tag: "{{ env_type }}-{{ guid }}"

# Why is this config being deployed?
# Some valid: development, ilt, production, event
purpose: development

# This should be overwritten based on the user ordering the catalog item
# It will be used by the bastion-student-user role and created on the bastion
student_name: lab-user

# Enable this if you want to create a user on the bastion
# Mutually exclusive with {{ install_ipa_client }}
install_student_user: true

# TODO: What does this really do besides run the role?
set_env_authorized_key: true
env_authorized_key: "{{guid}}key"
key_name: "default_key_name"

# This is the user that Ansible will use to connect to the nodes it is
# configuring from the admin/control host
ansible_user: cloud-user
remote_user: cloud-user

# Run the bastion-lite role
install_bastion: true

# FTL is used for grading and solving. It will pull in the external ftl-injector role.
# This might be enabled when we have solvers to run or graders for ILT
# install_ftl: true

# This var will set the version of ftl-injector to use.
# In addition, it implies that FTL should be installed, eventually 
# removing the need for install_ftl var.
# ftl_injector_tag: v0.17.0

# FTL injector will try to install python-pip and we only have python3-pip available
# This var will force the ftl-injector role to adapt accordingly
# ftl_use_python3: true

# This will tell Agnosticd to use either:
# sattelite, rhn, or file for repos
repo_method: satellite
satellite_url: FROM_SECRET
satellite_activationkey: FROM_SECRET
satellite_org: FROM_SECRET
use_content_view: true

# Packages to install on all of the hosts deployed as part of the agnosticd config
# This invokes the "common" role
install_common: true

# As part of the "common" role, this cause it to do a yum update on the host
update_packages: true

# The packages that will be installed by the "common" role. Only put things
# in this list that are needed, stable, and useful on every node.
common_packages:
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - ansible
  - git
  - vim-enhanced
  - httpd-tools
  - openldap-clients
  - podman
  - tree

# If you want DNS entries to be created automatically, choose one of these.
# Alternately, they can both be set to false.
use_dynamic_dns: true
# This is not fully implemented yet
# use_route53: false

# The domain that you want to add DNS entries to
osp_cluster_dns_zone: blue.osp.opentlc.com

# The dynamic DNS server you will add entries to.
# NOTE: This is only applicable when {{ use_dynamic_dns}} is true
osp_cluster_dns_server: ddns01.opentlc.com

# Whether to wait for an ack from the DNS servers before continuing
wait_for_dns: true

# Authenticaion for DDNS
# ddns_key_name:
# ddns_key_algorithm:                # default value set to: "hmac-md5"
# ddns_secret_name:

# Quotas to set for new project that is created
quota_num_instances: 15
quota_num_cores: 72
quota_memory: 163840 # in MB
quota_num_volumes: 25
quota_volumes_gigs: 1000
quota_networks: 3
quota_subnets: 3
quota_routers: 3
quota_fip: 5
quota_sg: 20
quota_sg_rules: 200

# The external network in OpenStack where the floating IPs (FIPs) come from
provider_network: external

# A list of the private networks and subnets to create in the project
# You can create as many as you want, but at least one is required.
# Use the name of the networks where appropriate in the instance list
networks:
  - name: vsphere
    shared: "false"
    subnet_cidr: 192.168.0.0/24
    gateway_ip: 192.168.0.1
    allocation_start: 192.168.0.10
    allocation_end: 192.168.0.254
    dns_nameservers: []
    create_router: true

network_target: "vsphere"
network_subnet_cidr: "{{ networks | json_query(query_subnet_cidr) | first }}"
query_subnet_cidr: "[?name=='{{ network_target }}'].subnet_cidr"

# Set these if you need additional FIPs that may not be directly
# associated with an instance on creation.
# Create these as a dict.
additional_fips:
  test_fip:
    description: The floating IP to test with
    network: "{{ provider_network }}"

# These will influence the bastion if it is being deployed
flavor_bastion: 2c2g30d
image_bastion: rhel-8.1

# These will influence the utility VM, which is primarily used for disconnected
# install, but can be used for anything really.
flavor_utilityvm: 2c2g30d
image_utilityvm: rhel-8.1

# The ESX hosts are deployed from specific images rather than a generic image.
image_esxhost1: esxi-6.7-host1-image
image_esxhost2: esxi-6.7-host2-image
image_esxhost3: esxi-6.7-host3-image

# Each ESX host has a MAC that we will reuse for vmk0.
# TODO: Make this not matter.
mac_esxhost1: fa:16:3e:eb:a0:7b
mac_esxhost2: fa:16:3e:96:17:dc
mac_esxhost3: fa:16:3e:0b:92:2f

# The size of the ESX host.
# You can set `flavor_esxhost` or specify a separate flavor for each.
flavor_esxhost: 8c32g100d
flavor_esxhost1: "{{ flavor_esxhost }}"
flavor_esxhost2: "{{ flavor_esxhost }}"
flavor_esxhost3: "{{ flavor_esxhost }}"

# Instances to be provisioned in new project
# Provide these as a list.
# Metadata in OpenStack is equivelent to tags in AWS
# These instances will be created with Cinder persistent volumes
instances:
  - name: bastion
    count: 1
    unique: yes
    alt_name: bastion
    image_id: "{{ image_bastion }}"
    floating_ip: yes
    flavor:
      osp: "{{ flavor_bastion }}"
    metadata:
      - AnsibleGroup: "bastions,clientvms"
      - function: bastion
      - user: nate
      - project: "{{ project_tag }}"
      - ostype: linux
      - Purpose: "{{ purpose }}"
    rootfs_size: 30
    network: vsphere
    security_groups:
      - bastion_sg

  - name: utilityvm
    count: 1
    image_id: "{{ image_utilityvm }}"
    floating_ip: no
    flavor:
      osp: "{{ flavor_utilityvm }}"
    metadata:
      - AnsibleGroup: "utility"
      - function: bastion
      - user: nate
      - project: "{{ project_tag }}"
      - ostype: linux
      - Purpose: "{{ purpose }}"
    rootfs_size: 50
    network: vsphere
    security_groups:
      - utility_sg
  
  - name: esxhost1
    count: 1
    image_id: "{{ image_esxhost1 }}"
    floating_ip: no
    flavor:
      osp: "{{ flavor_esxhost1 }}"
    metadata:
      - AnsibleGroup: "esxhost"
      - function: esxhost
      - user: "{{ student_name }}"
      - project: "{{ project_tag }}"
      - ostype: esx
      - Purpose: "{{ purpose }}"
    rootfs_size: 50
    network: vsphere
    mac_address: "{{ mac_esxhost1 }}"
    security_groups:
      - vsphere_sg

  - name: esxhost2
    count: 1
    image_id: "{{ image_esxhost2 }}"
    floating_ip: no
    flavor:
      osp: "{{ flavor_esxhost2 }}"
    metadata:
      - AnsibleGroup: "esxhost"
      - function: esxhost
      - user: "{{ student_name }}"
      - project: "{{ project_tag }}"
      - ostype: esx
      - Purpose: "{{ purpose }}"
    rootfs_size: 50
    network: vsphere
    mac_address: "{{ mac_esxhost2 }}"
    security_groups:
      - vsphere_sg

  - name: esxhost3
    count: 1
    image_id: "{{ image_esxhost3 }}"
    floating_ip: no
    flavor:
      osp: "{{ flavor_esxhost3 }}"
    metadata:
      - AnsibleGroup: "esxhost"
      - function: esxhost
      - user: "{{ student_name }}"
      - project: "{{ project_tag }}"
      - ostype: esx
      - Purpose: "{{ purpose }}"
    rootfs_size: 50
    network: vsphere
    mac_address: "{{ mac_esxhost3 }}"
    security_groups:
      - vsphere_sg

# Security groups and associated rules. This will be provided
#when the Heat template is generated separate groups and rules
security_groups:
  - name: bastion_sg
    description: Bastion security group allows basic icmp and SSH ingress and egress to *
    rules:
    - protocol: icmp
      direction: ingress
    - protocol: tcp
      direction: ingress
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
  - name: utility_sg
    description: Utility security group allows SSH from bastion and egress to *
    rules:
    - protocol: icmp
      direction: ingress
    - protocol: tcp
      direction: ingress
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
    - protocol: tcp
      direction: ingress
      port_range_min: 80
      port_range_max: 80
      remote_ip_prefix: "{{ network_subnet_cidr }}"
      description: "http traffic for ignition files"
    - protocol: tcp
      direction: ingress
      port_range_min: 2049
      port_range_max: 2049
      remote_ip_prefix: "{{ network_subnet_cidr }}"
      description: "NFS traffic"
  - name: vsphere_sg
    description: Utility security group allows SSH from bastion and egress to *
    rules:
    - protocol: icmp
      direction: ingress
    - protocol: tcp
      direction: ingress
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
